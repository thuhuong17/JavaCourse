--------------------------MANG-------------------
1. Cho một mảng các số nguyên n phần tử arr và số nguyên k được nhập từ bàn phím. Bạn hãy viết chương trình hiển thị ra màn hình số phần tử có giá trị bằng k trong mảng arr.
Ví dụ nếu bạn nhập n = 6, arr = [3, 8, 7, 8, 3, 3], k = 3 như bên dưới:
    Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int[] arr = new int[n];

		for (int i = 0; i < n; i++) {
			arr[i] = sc.nextInt();
		}
		int k = sc.nextInt();
		int count=0;
		for(int i=0; i<n; i++)
		{
			if(arr[i]==k)
			{
				count++;
			}
		}
		System.out.print(count);
	}
2. Cho một mảng các số nguyên n phần tử arr. Bạn hãy viết chương trình tính tổng các số lẻ lớn hơn 0 trong mảng.
    Scanner sc = new Scanner(System.in);
		int n =sc.nextInt();
		int a[]= new int[n];

		for(int i=0;i<n;i++)
		{
			a[i]=sc.nextInt();
		}
		int total =0;
		for(int i=0; i<n;i++)
		{
			if(a[i]%2!=0 && a[i]>0)
			{
				total+=a[i];
			}
		}
		System.out.print(total);
	}
3. Cho một mảng các số nguyên n phần tử arr. Bạn hãy viết chương trình hiển thị những số lớn hơn hoặc bằng 0 và nhỏ hơn hoặc bằng 10 trong mảng arr.
    		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int a[] = new int[n];

		for(int i=0;i<n;i++)
		{
			a[i]=sc.nextInt();
		}
		for(int i=0; i<n;i++)
		{
			if(a[i]>=0 && a[i]<=10)
			{
				System.out.print(a[i]+ " ");
			}
		}
4. Cho một mảng các số nguyên n phần tử arr. Bạn hãy viết chương trình sắp xếp các phần tử của mảng theo thứ tự tăng dần và hiển thị ra màn hình mảng sau khi đã sắp xếp.
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int a[] = new int[n];

		for(int i=0;i<n;i++)
		{
			a[i]=sc.nextInt();
		}

		for(int i=0; i<n;i++)
		{
			for(int j=i+1;j<n;j++)
			{
				if(a[i]>a[j])
				{
					int temp = a[i];
					a[i]=a[j];
					a[j]=temp;
				}
			}
		}
		for(int i=0;i<n;i++)
		{
			System.out.print(a[i] + " ");
		}
	}
5. Cú pháp để khai báo mảng 2 chiều với n hàng và m cột trong Java: int[][] arr = new int[n][m];
6. Cho một mảng 2 chiều các số nguyên n hàng m cột arr được nhập từ bàn phím. Bạn hãy viết chương trình tính tổng các phần tử trong mảng arr.
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int m = sc.nextInt();
		int[][] arr = new int[n][m];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				arr[i][j] = sc.nextInt();
			}
		}

		int answer = 0;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				answer += arr[i][j];
			}
		}

		System.out.print(answer);
	}
7. Cho một mảng 2 chiều các số nguyên n hàng m cột arr được nhập từ bàn phím. Bạn hãy viết chương trình tính tổng các phần tử chia hết cho 5 trong arr.
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int m = sc.nextInt();
		int[][] arr = new int[n][m];

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				arr[i][j] = sc.nextInt();
			}
		}
		int total=0;
		for(int i=0;i<n;i++)
		{
			for(int j=0;j<m;j++)
			{
				if(arr[i][j]%5==0)
				{
					total+=arr[i][j];
				}
			}
		}
		System.out.print(total);
---------------------------XU LY CHUOI---------------------
1. String bản chất cũng giống như một mảng các ký tự, để lấy ra ký tự thứ k bên trong String bạn có thể dùng phương thức charAt(k - 1); (String cũng giống như mảng, ký tự thứ k có chỉ số là k - 1):
2.Cho xâu s và số nguyên k được nhập từ bàn phím. Bạn hãy viết chương trình in ra màn hình ký tự thứ k trong xâu s.
		Scanner sc = new Scanner(System.in);
		String s = sc.next();
		int k = sc.nextInt();
		System.out.print(s.charAt(k-1));
3. 
		Scanner sc = new Scanner(System.in);
		String s = sc.next();
		char c = sc.next().charAt(0);
		int count=0;
		for(int i=0;i<s.length();i++)
		{
			if(s.charAt(i)==c)
			{
				count++;
			}
		}
		System.out.print(count);
4.Cho xâu s và ký tự c được nhập từ bàn phím, bạn hãy viết chương trình in ra vị trí đầu tiên mà ký tự c xuất hiện trong xâu s, nếu ký tự c không xuất hiện trong s thì in ra -1.v
		Scanner sc = new Scanner(System.in);
		String s = sc.next();
		char c = sc.next().charAt(0);
		int answer=-1;
		for(int i =0; i<s.length();i++)
		{
			if(s.charAt(i)==c)
			{
				answer=i;
				break;
			}
		}
		System.out.print(answer);
	}
###5. Phương thức length
Như bạn đã được học ở bài trước, đây là phương thức trả về độ dài của một String. Ví dụ:
import java.util.Scanner;
public class Array {
	public static void main(String[] args) {
		String s = "Code";
		System.out.print(s.length());
	}
}
Kết quả khi chạy chương trình:
4
###6. Phương thức charAt
Đây là phương thức trả về một ký tự trong String. Ví dụ:
import java.util.Scanner;
public class Array {
	public static void main(String[] args) {
		String s = "Code";
		System.out.print(s.charAt(2));
	}
}
Kết quả:
d
###7. Phương thức replace
Phương thức này dùng để thay thế các chuỗi/ký tự được tìm thấy thành chuỗi/ký tự khác. Ví dụ:
import java.util.Scanner;
public class Array {
	public static void main(String[] args) {
		System.out.println("Cod3l3arn".replace('3', 'e'));
		System.out.println("Blackcat".replace("Black", "White"));
	}
}
Kết quả khi chạy chương trình:
Codelearn
Whitecat
###8. Phương thức toUpperCase/toLowerCase
Đây là hai phương thức dùng để chuyển các ký tự của một xâu từ in thường về in hoa và ngược lại. Ví dụ:
import java.util.Scanner;
public class Array {
	public static void main(String[] args) {
		String s = "CoDeLeArN";
		System.out.println(s.toUpperCase());
		System.out.println(s.toLowerCase());
	}
}
Kết quả khi chạy chương trình:
CODELEARN
codelearn
###9. Phương thức indexOf
Phương thức này trả về vị trí xuất hiện đầu tiên của một String trong String khác, nếu không tìm thấy thì trả về -1. Ví dụ:
import java.util.Scanner;
public class Array {
	public static void main(String[] args) {
		String s = "Codelearn";
		System.out.println(s.indexOf("learn"));
		System.out.println(s.indexOf("black"));
	}
}
Kết quả khi chạy chương trình:
4
-1
###9. Phương thức startsWith và endsWith
Phương thức này dùng để kiểm tra một xâu có bắt đầu hoặc kết thúc băng một xâu khác không. Ví dụ:
import java.util.Scanner;
public class Array {
	public static void main(String[] args) {
		String name = "Codelearn";
		System.out.println(name.startsWith("Code"));
		System.out.println(name.startsWith("abc"));
		System.out.println(name.endsWith("rn"));
		System.out.println(name.endsWith("z"));
	}
}
Kết quả khi chạy chương trình:
true
false
true
false
###7. Phương thức split
Phương thức này dùng để tách một xâu ra thành mảng các xâu dựa trên một xâu cho trước. Ví dụ:
import java.util.Scanner;
public class Array {
	public static void main(String[] args) {
		String s = "Welcome to codelearn!";
		String[] words = s.split(" ");
		for(String word:words) {
			System.out.println(word);
		}
	}
}
Kết quả khi chạy chương trình:
Welcome
to
codelearn!
8. Phương thức substring
Đây là phương thức dùng để lấy ra một xâu con dựa trên chỉ số bắt đầu và chỉ số kết thúc của một xâu khác. Ví dụ:
import java.util.Scanner;
public class Array {
	public static void main(String[] args) {
		String name = "Codelearn";
		System.out.println(name.substring(0, 2));
		System.out.println(name.substring(0, 4));
		System.out.println(name.substring(4));
	}
}
Kết quả khi chạy chương trình:
Co
Code
learn
5. Cho xâu s được nhập vào từ bàn phím, bạn hãy viết chương trình hiển thị ra màn hình số các ký tự in hoa trong xâu s.
		Scanner sc = new Scanner(System.in);
		String s = sc.next();
		int answer = 0;
		for (int i = 0; i < s.length(); i++) {
			if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {
				answer++;
			}
		}
		System.out.print(answer);
	}
7. Cho xâu s được nhập và từ bàn phím, bạn hãy viết chương trình đảo ngược xâu s và hiển thị ra màn hình.
		Scanner sc = new Scanner(System.in);
		String s = sc.next();
		String answer = "";
		for (int i = s.length() - 1; i >= 0; i--) {
			answer += s.charAt(i);
		}
		System.out.print(answer);
------------------------------ PHUONG THUC TRONG JAVA----------------
1. Cú pháp để khai báo một phương thức đơn giản sẽ giống như sau:
public static void <tên_phương_thức>(){
	// Các đoạn code bên trong phương thức
}
2. Bạn hãy viết phương thức trả về tổng của các phần tử trong mảng các số nguyên arr được nhập vào từ bàn phím.
Ví dụ
Nếu bạn nhập n = 3, arr = [2, 4, 1] thì màn hình sẽ hiển thị ra 7.
Nếu bạn nhập n = 4, arr = [2, 2, 3, 4] thì màn hình sẽ hiển thị ra 11.
	import java.util.Scanner;

	public class Method {
	public static int sumOfArray(int[] arr) {
		int total=0;
		for(int i=0;i<arr.length;i++)
		{
			total+=arr[i];
		}
		return total;
	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int[] arr = new int[n];
		for (int i = 0; i < n; i++) {
			arr[i] = sc.nextInt();
		}
		System.out.print(sumOfArray(arr));
	}
}
3. Bạn hãy viết phương thức hiển thị ra màn hình những xâu có độ dài lớn hơn 3 trong mảng arr.
Ví dụ
Nếu bạn nhập n = 3, arr = ["abcd", "ab", "xyz"] thì màn hình sẽ hiển thị ra:
abcd​
Nếu bạn nhập n = 4, arr = ["1234", "abcde", "xy", "code"] thì màn hình sẽ hiển thị ra:
1234 abcde code​
	import java.util.Scanner;

	public class Method {
	public static void show(String[] arr) {
		for (int i = 0; i < arr.length; i++) {
			if (arr[i].length() > 3) {
				System.out.print(arr[i] + " ");
			}
		}
	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		String[] arr = new String[n];
		for (int i = 0; i < n; i++) {
			arr[i] = sc.next();
		}
		show(arr);
	}
}
4. Bạn hãy viết phương thức trả về số lớn nhất trong 3 số được nhập và từ bàn phím.

Ví dụ

Nếu bạn nhập a = 6, b = 2, c = 8 thì màn hình sẽ hiển thị ra 8.
Nếu bạn nhập a = 4, b = 4, c = 4 thì màn hình sẽ hiển thị ra 4.
Hướng dẫn
Khi gặp câu lệnh return thì phương thức sẽ trả về kết quả được return luôn và sẽ không thực thi tiếp, do đó bạn có thể làm như sau:

import java.util.Scanner;

public class Method {
	public static int max3(int a, int b, int c) {
		if(a >= b && a >= c) {
			return a;
		}
		if(b >= c) {
			return b;
		}
		return c;
	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int a = sc.nextInt();
		int b = sc.nextInt();
		int c = sc.nextInt();

		System.out.print(max3(a, b, c));
	}
}
5. Cho hình tròn có bán kính r được nhập từ bàn phím, bạn hãy viết phương thức trả về chu vi của hình tròn này biết π = 3.14.

Ví dụ nếu bạn nhập:

3.5
Thì chương trình sẽ hiển thị ra:

21.98
Hướng dẫn
Code mẫu:

import java.util.Scanner;

public class Method {
	public static double circumference(double r) {
		return 2 * r * 3.14;
	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		double r = sc.nextDouble();
		System.out.print(circumference(r));
	}
}
6. Cho số nguyên dương n được nhập từ bàn phím, bạn hãy viết phương thức đệ quy trả về n! (n giai thừa).

Ví dụ nếu bạn nhập n = 5 thì chương trình sẽ hiển thị lên màn hình 120.

Lý thuyết
Phương thức đệ quy là phương thức mà gọi tới chính nó, ví dụ một phương thức đệ quy sẽ trông giống như sau:

public static void recurse() {
    ...
    recurse();
    ...
}
Do tính chất tự gọi lại chính nó nên để tránh việc chạy không bao giờ dừng bạn luôn cần có điểm dừng (điểm dừng được hiểu đơn giản là tới một lúc nào đó, phương thức đệ quy sẽ không gọi lại chính nó nữa).

Mô tả phương thức đệ quy tính 5!:

factorial(5)
= 5 * factorial(4)
= 5 * 4 * factorial(3)
= 5 * 4 * 3 * factorial(2)
= 5 * 4 * 3 * 2 * factorial(1)
= 5 * 4 * 3 * 2 * 1
= 120
Điểm dừng ở ví dụ trên chính là khi đầu vào của phương thức factorial bằng 1 thì phương thức factorial sẽ trả về 1 thay vì gọi tiếp tới chính nó.

Để hiểu rõ hơn bạn hãy xem ví dụ tiếp theo về phương thức đệ quy tính tổng các số từ 1 tới n:

import java.util.Scanner;

public class Method {
	public static int sum(int n) {
		if (n == 0) {
			return 0;
		}
		return n + sum(n - 1);
	}

	public static void main(String[] args) {
		System.out.print(sum(10));
	}
}
Kết quả khi chạy chương trình:

55
Điểm dừng ở đây chính là khi n = 0 thì phương thức sum sẽ trả về 0 thay vì gọi tiếp tới chính nó.

Bạn có thể làm bài này dựa vào ví dụ trên, nếu bạn vẫn chưa làm được thì có thể xem hướng dẫn bên dưới:

Hướng dẫn
Code mẫu:

import java.util.Scanner;

public class Method {
	public static int factorial(int n) {
	    if (n == 1) return 1;
	    return n * factorial(n - 1);
	}


	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		System.out.print(factorial(n));
	}
}
7. Cho số nguyên n được nhập từ bàn phím, bạn hãy viết phương thức đệ quy trả về tổng các số lẻ từ 1 tới n.

Ví dụ nếu bạn nhập n = 5 thì chương trình sẽ hiển thị lên màn hình 9 (do 1 + 3 + 5 = 9).

Hướng dẫn
Bài này bạn cần kết hợp phương thức đệ quy với câu lệnh if-else.

Code mẫu:

import java.util.Scanner;

public class Method {
	public static int sum(int n) {
		if (n == 1) return 1;
	    if (n % 2 == 0) {
	        return sum(n - 1);
	    } else {
	        return n + sum(n - 1);
	    }
	}


	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		System.out.print(sum(n));
	}
}
8. Cho mảng các số nguyên n phần tử arr được nhập từ bàn phím. Bạn hãy viết phương thức đệ quy tính tổng các phần tử của mảng.

Nếu bạn vẫn chưa chưa thạo cách dùng phương thức đệ quy thì có thể xem hướng dẫn bên dưới.

Hướng dẫn
Bài này cũng khá giống bài trước, bạn chỉ cần lưu ý rằng phần tử đầu tiên của mảng là a[0] chứ không phải là a[1].

Code mẫu:

import java.util.Scanner;

public class Method {
	public static int sumOfArray(int[] arr, int n) {
		if (n == 1) return arr[0];
	    return arr[n - 1] + sumOfArray(arr, n - 1);
	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int[] arr = new int[n];
		for(int i=0;i<n;i++) {
			arr[i] = sc.nextInt();
		}
		System.out.print(sumOfArray(arr, n));
	}
}






















